We can look at some of the following criteria for evaluation:
1. Safety 
Leveraging static guarantees of the Rust compiler and available bare metal runtime features (borrow checked references, RAII, OBRM, smart pointers, etc.), can we find any memory issues in egos or guarantee memory safety, especially in critical components? Are there any architectural decisions we can make by leveraging static guarantees?

2. Ergonomics and maintainability
As a teaching OS, will the high level language features of Rust (compositional structs, collections, etc.) assist in the development speed, readability, and future maintenance of egos-2000 for students?

3. Performance
Are there any significant performance penalties or incompatibilities with using Rust for kernel development, especially for incremental rewrites and improvements to existing C code? Is it not only possible, but easy to do and reproducible?

